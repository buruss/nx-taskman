"""All input for the create `TaskDetail` mutation."""
input CreateTaskDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TaskDetail` to be created by this mutation."""
  taskDetail: TaskDetailInput!
}

"""The output of our create `TaskDetail` mutation."""
type CreateTaskDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TaskDetail` that was created by this mutation."""
  taskDetail: TaskDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `TaskDetail`."""
  task: Task

  """An edge for our `TaskDetail`. May be used by Relay 1."""
  taskDetailEdge(
    """The method to use when ordering `TaskDetail`."""
    orderBy: [TaskDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaskDetailsEdge
}

"""All input for the create `Task` mutation."""
input CreateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Task` to be created by this mutation."""
  task: TaskInput!
}

"""The output of our create `Task` mutation."""
type CreateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was created by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Task`."""
  user: User

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the create `TodoConversation` mutation."""
input CreateTodoConversationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TodoConversation` to be created by this mutation."""
  todoConversation: TodoConversationInput!
}

"""The output of our create `TodoConversation` mutation."""
type CreateTodoConversationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoConversation` that was created by this mutation."""
  todoConversation: TodoConversation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TodoItem` that is related to this `TodoConversation`."""
  todo: TodoItem

  """Reads a single `User` that is related to this `TodoConversation`."""
  user: User

  """An edge for our `TodoConversation`. May be used by Relay 1."""
  todoConversationEdge(
    """The method to use when ordering `TodoConversation`."""
    orderBy: [TodoConversationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoConversationsEdge
}

"""All input for the create `TodoItem` mutation."""
input CreateTodoItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TodoItem` to be created by this mutation."""
  todoItem: TodoItemInput!
}

"""All input for the create `TodoItemLabel` mutation."""
input CreateTodoItemLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TodoItemLabel` to be created by this mutation."""
  todoItemLabel: TodoItemLabelInput!
}

"""The output of our create `TodoItemLabel` mutation."""
type CreateTodoItemLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoItemLabel` that was created by this mutation."""
  todoItemLabel: TodoItemLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TodoItem` that is related to this `TodoItemLabel`."""
  todoItem: TodoItem

  """Reads a single `TodoLabel` that is related to this `TodoItemLabel`."""
  todoLabel: TodoLabel

  """An edge for our `TodoItemLabel`. May be used by Relay 1."""
  todoItemLabelEdge(
    """The method to use when ordering `TodoItemLabel`."""
    orderBy: [TodoItemLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoItemLabelsEdge
}

"""The output of our create `TodoItem` mutation."""
type CreateTodoItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoItem` that was created by this mutation."""
  todoItem: TodoItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `TodoItem`."""
  user: User

  """An edge for our `TodoItem`. May be used by Relay 1."""
  todoItemEdge(
    """The method to use when ordering `TodoItem`."""
    orderBy: [TodoItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoItemsEdge
}

"""All input for the create `TodoLabel` mutation."""
input CreateTodoLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TodoLabel` to be created by this mutation."""
  todoLabel: TodoLabelInput!
}

"""The output of our create `TodoLabel` mutation."""
type CreateTodoLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoLabel` that was created by this mutation."""
  todoLabel: TodoLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TodoLabel`. May be used by Relay 1."""
  todoLabelEdge(
    """The method to use when ordering `TodoLabel`."""
    orderBy: [TodoLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoLabelsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteTaskByNodeId` mutation."""
input DeleteTaskByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTaskDetailByNodeId` mutation."""
input DeleteTaskDetailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaskDetail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTaskDetail` mutation."""
input DeleteTaskDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TaskDetail` mutation."""
type DeleteTaskDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TaskDetail` that was deleted by this mutation."""
  taskDetail: TaskDetail
  deletedTaskDetailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `TaskDetail`."""
  task: Task

  """An edge for our `TaskDetail`. May be used by Relay 1."""
  taskDetailEdge(
    """The method to use when ordering `TaskDetail`."""
    orderBy: [TaskDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaskDetailsEdge
}

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was deleted by this mutation."""
  task: Task
  deletedTaskNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Task`."""
  user: User

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the `deleteTodoConversationByNodeId` mutation."""
input DeleteTodoConversationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoConversation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTodoConversation` mutation."""
input DeleteTodoConversationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TodoConversation` mutation."""
type DeleteTodoConversationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoConversation` that was deleted by this mutation."""
  todoConversation: TodoConversation
  deletedTodoConversationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TodoItem` that is related to this `TodoConversation`."""
  todo: TodoItem

  """Reads a single `User` that is related to this `TodoConversation`."""
  user: User

  """An edge for our `TodoConversation`. May be used by Relay 1."""
  todoConversationEdge(
    """The method to use when ordering `TodoConversation`."""
    orderBy: [TodoConversationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoConversationsEdge
}

"""All input for the `deleteTodoItemByNodeId` mutation."""
input DeleteTodoItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTodoItem` mutation."""
input DeleteTodoItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTodoItemLabelByNodeId` mutation."""
input DeleteTodoItemLabelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoItemLabel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTodoItemLabel` mutation."""
input DeleteTodoItemLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  todoItemId: UUID!
  todoLabelId: Int!
}

"""The output of our delete `TodoItemLabel` mutation."""
type DeleteTodoItemLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoItemLabel` that was deleted by this mutation."""
  todoItemLabel: TodoItemLabel
  deletedTodoItemLabelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TodoItem` that is related to this `TodoItemLabel`."""
  todoItem: TodoItem

  """Reads a single `TodoLabel` that is related to this `TodoItemLabel`."""
  todoLabel: TodoLabel

  """An edge for our `TodoItemLabel`. May be used by Relay 1."""
  todoItemLabelEdge(
    """The method to use when ordering `TodoItemLabel`."""
    orderBy: [TodoItemLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoItemLabelsEdge
}

"""The output of our delete `TodoItem` mutation."""
type DeleteTodoItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoItem` that was deleted by this mutation."""
  todoItem: TodoItem
  deletedTodoItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `TodoItem`."""
  user: User

  """An edge for our `TodoItem`. May be used by Relay 1."""
  todoItemEdge(
    """The method to use when ordering `TodoItem`."""
    orderBy: [TodoItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoItemsEdge
}

"""All input for the `deleteTodoLabelByNodeId` mutation."""
input DeleteTodoLabelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoLabel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTodoLabel` mutation."""
input DeleteTodoLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TodoLabel` mutation."""
type DeleteTodoLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoLabel` that was deleted by this mutation."""
  todoLabel: TodoLabel
  deletedTodoLabelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TodoLabel`. May be used by Relay 1."""
  todoLabelEdge(
    """The method to use when ordering `TodoLabel`."""
    orderBy: [TodoLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoLabelsEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Task`."""
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """Creates a single `TaskDetail`."""
  createTaskDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskDetailInput!
  ): CreateTaskDetailPayload

  """Creates a single `TodoConversation`."""
  createTodoConversation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodoConversationInput!
  ): CreateTodoConversationPayload

  """Creates a single `TodoItem`."""
  createTodoItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodoItemInput!
  ): CreateTodoItemPayload

  """Creates a single `TodoItemLabel`."""
  createTodoItemLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodoItemLabelInput!
  ): CreateTodoItemLabelPayload

  """Creates a single `TodoLabel`."""
  createTodoLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTodoLabelInput!
  ): CreateTodoLabelPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Task` using its globally unique id and a patch."""
  updateTaskByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskByNodeIdInput!
  ): UpdateTaskPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload

  """
  Updates a single `TaskDetail` using its globally unique id and a patch.
  """
  updateTaskDetailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskDetailByNodeIdInput!
  ): UpdateTaskDetailPayload

  """Updates a single `TaskDetail` using a unique key and a patch."""
  updateTaskDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskDetailInput!
  ): UpdateTaskDetailPayload

  """
  Updates a single `TodoConversation` using its globally unique id and a patch.
  """
  updateTodoConversationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoConversationByNodeIdInput!
  ): UpdateTodoConversationPayload

  """Updates a single `TodoConversation` using a unique key and a patch."""
  updateTodoConversation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoConversationInput!
  ): UpdateTodoConversationPayload

  """Updates a single `TodoItem` using its globally unique id and a patch."""
  updateTodoItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoItemByNodeIdInput!
  ): UpdateTodoItemPayload

  """Updates a single `TodoItem` using a unique key and a patch."""
  updateTodoItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoItemInput!
  ): UpdateTodoItemPayload

  """
  Updates a single `TodoItemLabel` using its globally unique id and a patch.
  """
  updateTodoItemLabelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoItemLabelByNodeIdInput!
  ): UpdateTodoItemLabelPayload

  """Updates a single `TodoItemLabel` using a unique key and a patch."""
  updateTodoItemLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoItemLabelInput!
  ): UpdateTodoItemLabelPayload

  """Updates a single `TodoLabel` using its globally unique id and a patch."""
  updateTodoLabelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoLabelByNodeIdInput!
  ): UpdateTodoLabelPayload

  """Updates a single `TodoLabel` using a unique key and a patch."""
  updateTodoLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTodoLabelInput!
  ): UpdateTodoLabelPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Deletes a single `Task` using its globally unique id."""
  deleteTaskByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskByNodeIdInput!
  ): DeleteTaskPayload

  """Deletes a single `Task` using a unique key."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """Deletes a single `TaskDetail` using its globally unique id."""
  deleteTaskDetailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskDetailByNodeIdInput!
  ): DeleteTaskDetailPayload

  """Deletes a single `TaskDetail` using a unique key."""
  deleteTaskDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskDetailInput!
  ): DeleteTaskDetailPayload

  """Deletes a single `TodoConversation` using its globally unique id."""
  deleteTodoConversationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoConversationByNodeIdInput!
  ): DeleteTodoConversationPayload

  """Deletes a single `TodoConversation` using a unique key."""
  deleteTodoConversation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoConversationInput!
  ): DeleteTodoConversationPayload

  """Deletes a single `TodoItem` using its globally unique id."""
  deleteTodoItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoItemByNodeIdInput!
  ): DeleteTodoItemPayload

  """Deletes a single `TodoItem` using a unique key."""
  deleteTodoItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoItemInput!
  ): DeleteTodoItemPayload

  """Deletes a single `TodoItemLabel` using its globally unique id."""
  deleteTodoItemLabelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoItemLabelByNodeIdInput!
  ): DeleteTodoItemLabelPayload

  """Deletes a single `TodoItemLabel` using a unique key."""
  deleteTodoItemLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoItemLabelInput!
  ): DeleteTodoItemLabelPayload

  """Deletes a single `TodoLabel` using its globally unique id."""
  deleteTodoLabelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoLabelByNodeIdInput!
  ): DeleteTodoLabelPayload

  """Deletes a single `TodoLabel` using a unique key."""
  deleteTodoLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodoLabelInput!
  ): DeleteTodoLabelPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition
  ): TasksConnection

  """Reads and enables pagination through a set of `TaskDetail`."""
  taskDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TaskDetail`."""
    orderBy: [TaskDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskDetailCondition
  ): TaskDetailsConnection

  """Reads and enables pagination through a set of `TodoConversation`."""
  todoConversations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoConversation`."""
    orderBy: [TodoConversationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoConversationCondition
  ): TodoConversationsConnection

  """Reads and enables pagination through a set of `TodoItem`."""
  todoItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoItem`."""
    orderBy: [TodoItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoItemCondition
  ): TodoItemsConnection

  """Reads and enables pagination through a set of `TodoItemLabel`."""
  todoItemLabels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoItemLabel`."""
    orderBy: [TodoItemLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoItemLabelCondition
  ): TodoItemLabelsConnection

  """Reads and enables pagination through a set of `TodoLabel`."""
  todoLabels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoLabel`."""
    orderBy: [TodoLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoLabelCondition
  ): TodoLabelsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  task(id: Int!): Task
  taskDetail(id: Int!): TaskDetail
  todoConversation(id: Int!): TodoConversation
  todoItem(id: UUID!): TodoItem
  todoItemLabel(todoItemId: UUID!, todoLabelId: Int!): TodoItemLabel
  todoLabel(id: Int!): TodoLabel
  user(id: Int!): User
  userByUsername(username: String!): User

  """Reads a single `Task` using its globally unique `ID`."""
  taskByNodeId(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task

  """Reads a single `TaskDetail` using its globally unique `ID`."""
  taskDetailByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TaskDetail`.
    """
    nodeId: ID!
  ): TaskDetail

  """Reads a single `TodoConversation` using its globally unique `ID`."""
  todoConversationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TodoConversation`.
    """
    nodeId: ID!
  ): TodoConversation

  """Reads a single `TodoItem` using its globally unique `ID`."""
  todoItemByNodeId(
    """The globally unique `ID` to be used in selecting a single `TodoItem`."""
    nodeId: ID!
  ): TodoItem

  """Reads a single `TodoItemLabel` using its globally unique `ID`."""
  todoItemLabelByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TodoItemLabel`.
    """
    nodeId: ID!
  ): TodoItemLabel

  """Reads a single `TodoLabel` using its globally unique `ID`."""
  todoLabelByNodeId(
    """The globally unique `ID` to be used in selecting a single `TodoLabel`."""
    nodeId: ID!
  ): TodoLabel

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

type Task implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  description: String!
  userId: Int!
  status: TaskStatusEnum!
  title: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Task`."""
  user: User

  """Reads and enables pagination through a set of `TaskDetail`."""
  taskDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TaskDetail`."""
    orderBy: [TaskDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskDetailCondition
  ): TaskDetailsConnection!
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

type TaskDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  taskId: Int!
  detailType: String!
  detail: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Task` that is related to this `TaskDetail`."""
  task: Task
}

"""
A condition to be used against `TaskDetail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TaskDetailCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `taskId` field."""
  taskId: Int
}

"""An input for mutations affecting `TaskDetail`"""
input TaskDetailInput {
  id: Int
  taskId: Int!
  detailType: String!
  detail: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TaskDetail`. Fields that are set will be updated.
"""
input TaskDetailPatch {
  id: Int
  taskId: Int
  detailType: String
  detail: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `TaskDetail` values."""
type TaskDetailsConnection {
  """A list of `TaskDetail` objects."""
  nodes: [TaskDetail!]!

  """
  A list of edges which contains the `TaskDetail` and cursor to aid in pagination.
  """
  edges: [TaskDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TaskDetail` you could get from the connection."""
  totalCount: Int!
}

"""A `TaskDetail` edge in the connection."""
type TaskDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TaskDetail` at the end of the edge."""
  node: TaskDetail!
}

"""Methods to use when ordering `TaskDetail`."""
enum TaskDetailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TASK_ID_ASC
  TASK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Task`"""
input TaskInput {
  id: Int
  description: String!
  userId: Int!
  status: TaskStatusEnum
  title: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Task`. Fields that are set will be updated."""
input TaskPatch {
  id: Int
  description: String
  userId: Int
  status: TaskStatusEnum
  title: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """A list of `Task` objects."""
  nodes: [Task!]!

  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task!
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum TaskStatusEnum {
  OPEN
  IN_PROGRESS
  DONE
}

type TodoConversation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  todoId: UUID!
  userId: Int!
  message: String!
  sentAt: Datetime!

  """Reads a single `TodoItem` that is related to this `TodoConversation`."""
  todo: TodoItem

  """Reads a single `User` that is related to this `TodoConversation`."""
  user: User
}

"""
A condition to be used against `TodoConversation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TodoConversationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `todoId` field."""
  todoId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `TodoConversation`"""
input TodoConversationInput {
  id: Int
  todoId: UUID!
  userId: Int!
  message: String!
  sentAt: Datetime!
}

"""
Represents an update to a `TodoConversation`. Fields that are set will be updated.
"""
input TodoConversationPatch {
  id: Int
  todoId: UUID
  userId: Int
  message: String
  sentAt: Datetime
}

"""A connection to a list of `TodoConversation` values."""
type TodoConversationsConnection {
  """A list of `TodoConversation` objects."""
  nodes: [TodoConversation!]!

  """
  A list of edges which contains the `TodoConversation` and cursor to aid in pagination.
  """
  edges: [TodoConversationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TodoConversation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TodoConversation` edge in the connection."""
type TodoConversationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TodoConversation` at the end of the edge."""
  node: TodoConversation!
}

"""Methods to use when ordering `TodoConversation`."""
enum TodoConversationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TODO_ID_ASC
  TODO_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TodoItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: Int!
  completed: Boolean!
  starred: Boolean!
  important: Boolean!
  selected: Boolean!
  deleted: Boolean!
  title: String!
  notes: String
  startDate: Datetime
  dueDate: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `TodoItem`."""
  user: User

  """Reads and enables pagination through a set of `TodoConversation`."""
  todoConversationsByTodoId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoConversation`."""
    orderBy: [TodoConversationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoConversationCondition
  ): TodoConversationsConnection!

  """Reads and enables pagination through a set of `TodoItemLabel`."""
  todoItemLabelsByTodoItemId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoItemLabel`."""
    orderBy: [TodoItemLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoItemLabelCondition
  ): TodoItemLabelsConnection!
}

"""
A condition to be used against `TodoItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TodoItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `TodoItem`"""
input TodoItemInput {
  id: UUID
  userId: Int!
  completed: Boolean
  starred: Boolean
  important: Boolean
  selected: Boolean
  deleted: Boolean
  title: String!
  notes: String
  startDate: Datetime
  dueDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

type TodoItemLabel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  todoItemId: UUID!
  todoLabelId: Int!

  """Reads a single `TodoItem` that is related to this `TodoItemLabel`."""
  todoItem: TodoItem

  """Reads a single `TodoLabel` that is related to this `TodoItemLabel`."""
  todoLabel: TodoLabel
}

"""
A condition to be used against `TodoItemLabel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TodoItemLabelCondition {
  """Checks for equality with the object’s `todoItemId` field."""
  todoItemId: UUID

  """Checks for equality with the object’s `todoLabelId` field."""
  todoLabelId: Int
}

"""An input for mutations affecting `TodoItemLabel`"""
input TodoItemLabelInput {
  todoItemId: UUID!
  todoLabelId: Int!
}

"""
Represents an update to a `TodoItemLabel`. Fields that are set will be updated.
"""
input TodoItemLabelPatch {
  todoItemId: UUID
  todoLabelId: Int
}

"""A connection to a list of `TodoItemLabel` values."""
type TodoItemLabelsConnection {
  """A list of `TodoItemLabel` objects."""
  nodes: [TodoItemLabel!]!

  """
  A list of edges which contains the `TodoItemLabel` and cursor to aid in pagination.
  """
  edges: [TodoItemLabelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TodoItemLabel` you could get from the connection."""
  totalCount: Int!
}

"""A `TodoItemLabel` edge in the connection."""
type TodoItemLabelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TodoItemLabel` at the end of the edge."""
  node: TodoItemLabel!
}

"""Methods to use when ordering `TodoItemLabel`."""
enum TodoItemLabelsOrderBy {
  NATURAL
  TODO_ITEM_ID_ASC
  TODO_ITEM_ID_DESC
  TODO_LABEL_ID_ASC
  TODO_LABEL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `TodoItem`. Fields that are set will be updated.
"""
input TodoItemPatch {
  id: UUID
  userId: Int
  completed: Boolean
  starred: Boolean
  important: Boolean
  selected: Boolean
  deleted: Boolean
  title: String
  notes: String
  startDate: Datetime
  dueDate: Datetime
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `TodoItem` values."""
type TodoItemsConnection {
  """A list of `TodoItem` objects."""
  nodes: [TodoItem!]!

  """
  A list of edges which contains the `TodoItem` and cursor to aid in pagination.
  """
  edges: [TodoItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TodoItem` you could get from the connection."""
  totalCount: Int!
}

"""A `TodoItem` edge in the connection."""
type TodoItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TodoItem` at the end of the edge."""
  node: TodoItem!
}

"""Methods to use when ordering `TodoItem`."""
enum TodoItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TodoLabel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  handle: String!
  title: String!
  color: String!

  """Reads and enables pagination through a set of `TodoItemLabel`."""
  todoItemLabelsByTodoLabelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoItemLabel`."""
    orderBy: [TodoItemLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoItemLabelCondition
  ): TodoItemLabelsConnection!
}

"""
A condition to be used against `TodoLabel` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TodoLabelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `TodoLabel`"""
input TodoLabelInput {
  id: Int
  handle: String!
  title: String!
  color: String!
}

"""
Represents an update to a `TodoLabel`. Fields that are set will be updated.
"""
input TodoLabelPatch {
  id: Int
  handle: String
  title: String
  color: String
}

"""A connection to a list of `TodoLabel` values."""
type TodoLabelsConnection {
  """A list of `TodoLabel` objects."""
  nodes: [TodoLabel!]!

  """
  A list of edges which contains the `TodoLabel` and cursor to aid in pagination.
  """
  edges: [TodoLabelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TodoLabel` you could get from the connection."""
  totalCount: Int!
}

"""A `TodoLabel` edge in the connection."""
type TodoLabelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TodoLabel` at the end of the edge."""
  node: TodoLabel!
}

"""Methods to use when ordering `TodoLabel`."""
enum TodoLabelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateTaskByNodeId` mutation."""
input UpdateTaskByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  patch: TaskPatch!
}

"""All input for the `updateTaskDetailByNodeId` mutation."""
input UpdateTaskDetailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaskDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TaskDetail` being updated.
  """
  patch: TaskDetailPatch!
}

"""All input for the `updateTaskDetail` mutation."""
input UpdateTaskDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TaskDetail` being updated.
  """
  patch: TaskDetailPatch!
  id: Int!
}

"""The output of our update `TaskDetail` mutation."""
type UpdateTaskDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TaskDetail` that was updated by this mutation."""
  taskDetail: TaskDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `TaskDetail`."""
  task: Task

  """An edge for our `TaskDetail`. May be used by Relay 1."""
  taskDetailEdge(
    """The method to use when ordering `TaskDetail`."""
    orderBy: [TaskDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaskDetailsEdge
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  patch: TaskPatch!
  id: Int!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was updated by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Task`."""
  user: User

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge
}

"""All input for the `updateTodoConversationByNodeId` mutation."""
input UpdateTodoConversationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoConversation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TodoConversation` being updated.
  """
  patch: TodoConversationPatch!
}

"""All input for the `updateTodoConversation` mutation."""
input UpdateTodoConversationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TodoConversation` being updated.
  """
  patch: TodoConversationPatch!
  id: Int!
}

"""The output of our update `TodoConversation` mutation."""
type UpdateTodoConversationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoConversation` that was updated by this mutation."""
  todoConversation: TodoConversation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TodoItem` that is related to this `TodoConversation`."""
  todo: TodoItem

  """Reads a single `User` that is related to this `TodoConversation`."""
  user: User

  """An edge for our `TodoConversation`. May be used by Relay 1."""
  todoConversationEdge(
    """The method to use when ordering `TodoConversation`."""
    orderBy: [TodoConversationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoConversationsEdge
}

"""All input for the `updateTodoItemByNodeId` mutation."""
input UpdateTodoItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TodoItem` being updated.
  """
  patch: TodoItemPatch!
}

"""All input for the `updateTodoItem` mutation."""
input UpdateTodoItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TodoItem` being updated.
  """
  patch: TodoItemPatch!
  id: UUID!
}

"""All input for the `updateTodoItemLabelByNodeId` mutation."""
input UpdateTodoItemLabelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoItemLabel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TodoItemLabel` being updated.
  """
  patch: TodoItemLabelPatch!
}

"""All input for the `updateTodoItemLabel` mutation."""
input UpdateTodoItemLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TodoItemLabel` being updated.
  """
  patch: TodoItemLabelPatch!
  todoItemId: UUID!
  todoLabelId: Int!
}

"""The output of our update `TodoItemLabel` mutation."""
type UpdateTodoItemLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoItemLabel` that was updated by this mutation."""
  todoItemLabel: TodoItemLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TodoItem` that is related to this `TodoItemLabel`."""
  todoItem: TodoItem

  """Reads a single `TodoLabel` that is related to this `TodoItemLabel`."""
  todoLabel: TodoLabel

  """An edge for our `TodoItemLabel`. May be used by Relay 1."""
  todoItemLabelEdge(
    """The method to use when ordering `TodoItemLabel`."""
    orderBy: [TodoItemLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoItemLabelsEdge
}

"""The output of our update `TodoItem` mutation."""
type UpdateTodoItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoItem` that was updated by this mutation."""
  todoItem: TodoItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `TodoItem`."""
  user: User

  """An edge for our `TodoItem`. May be used by Relay 1."""
  todoItemEdge(
    """The method to use when ordering `TodoItem`."""
    orderBy: [TodoItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoItemsEdge
}

"""All input for the `updateTodoLabelByNodeId` mutation."""
input UpdateTodoLabelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TodoLabel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TodoLabel` being updated.
  """
  patch: TodoLabelPatch!
}

"""All input for the `updateTodoLabel` mutation."""
input UpdateTodoLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TodoLabel` being updated.
  """
  patch: TodoLabelPatch!
  id: Int!
}

"""The output of our update `TodoLabel` mutation."""
type UpdateTodoLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TodoLabel` that was updated by this mutation."""
  todoLabel: TodoLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TodoLabel`. May be used by Relay 1."""
  todoLabelEdge(
    """The method to use when ordering `TodoLabel`."""
    orderBy: [TodoLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TodoLabelsEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String!
  email: String
  createdAt: Datetime!
  updatedAt: Datetime!
  thumb: String
  password: String!
  salt: String!
  birthDate: Datetime

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition
  ): TasksConnection!

  """Reads and enables pagination through a set of `TodoItem`."""
  todoItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoItem`."""
    orderBy: [TodoItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoItemCondition
  ): TodoItemsConnection!

  """Reads and enables pagination through a set of `TodoConversation`."""
  todoConversations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TodoConversation`."""
    orderBy: [TodoConversationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TodoConversationCondition
  ): TodoConversationsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String!
  email: String
  createdAt: Datetime
  updatedAt: Datetime
  thumb: String
  password: String!
  salt: String!
  birthDate: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  email: String
  createdAt: Datetime
  updatedAt: Datetime
  thumb: String
  password: String
  salt: String
  birthDate: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
